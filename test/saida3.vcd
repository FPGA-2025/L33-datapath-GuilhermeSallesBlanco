$date
	Tue Jul 29 22:13:58 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module tb $end
$var reg 1 ! clk $end
$var reg 8 " counter [7:0] $end
$var reg 32 # expected_result [31:0] $end
$var reg 1 $ rst_n $end
$scope module t $end
$var wire 1 ! clk $end
$var wire 1 $ rst_n $end
$var wire 1 % wr_en $end
$var wire 1 & rd_en $end
$var wire 32 ' data_o [31:0] $end
$var wire 32 ( data_i [31:0] $end
$var wire 32 ) addr [31:0] $end
$var parameter 96 * MEMORY_FILE $end
$var parameter 32 + MEMORY_SIZE $end
$scope module core $end
$var wire 1 , PC_write_enable $end
$var wire 32 - addr_o [31:0] $end
$var wire 1 ! clk $end
$var wire 32 . data_o [31:0] $end
$var wire 1 & rd_en_o $end
$var wire 1 $ rst_n $end
$var wire 1 % wr_en_o $end
$var wire 5 / rs2 [4:0] $end
$var wire 5 0 rs1 [4:0] $end
$var wire 32 1 reg_write_data [31:0] $end
$var wire 1 2 reg_write $end
$var wire 5 3 rd [4:0] $end
$var wire 1 4 pc_write_cond $end
$var wire 1 5 pc_write $end
$var wire 1 6 pc_source $end
$var wire 32 7 pc_MUX [31:0] $end
$var wire 7 8 opcode [6:0] $end
$var wire 1 9 memory_write $end
$var wire 1 : memory_to_reg $end
$var wire 1 ; memory_read $end
$var wire 1 < lorD $end
$var wire 1 = is_immediate $end
$var wire 1 > ir_write $end
$var wire 32 ? imm_ext [31:0] $end
$var wire 7 @ funct7 [6:0] $end
$var wire 3 A funct3 [2:0] $end
$var wire 32 B data_i [31:0] $end
$var wire 2 C aluop [1:0] $end
$var wire 2 D alu_src_b [1:0] $end
$var wire 2 E alu_src_a [1:0] $end
$var wire 32 F RS2_data [31:0] $end
$var wire 32 G RS1_data [31:0] $end
$var wire 32 H PC_sel [31:0] $end
$var wire 1 I PC_plus4 $end
$var wire 1 J PC_next $end
$var wire 32 K ALU_result [31:0] $end
$var wire 32 L ALU_in2 [31:0] $end
$var wire 32 M ALU_in1 [31:0] $end
$var wire 1 N ALU_Z $end
$var wire 4 O ALU_OP [3:0] $end
$var parameter 32 P BOOT_ADDRESS $end
$var reg 32 Q ALUOut [31:0] $end
$var reg 32 R IR [31:0] $end
$var reg 32 S MDR [31:0] $end
$var reg 32 T PC [31:0] $end
$var reg 32 U PC_OLD [31:0] $end
$scope module alu $end
$var wire 32 V ALU_RS1_i [31:0] $end
$var wire 32 W ALU_RS2_i [31:0] $end
$var wire 1 N ALU_ZR_o $end
$var wire 4 X ALU_OP_i [3:0] $end
$var parameter 4 Y AND $end
$var parameter 4 Z EQUAL $end
$var parameter 4 [ GREATER_EQUAL $end
$var parameter 4 \ GREATER_EQUAL_U $end
$var parameter 4 ] NOR $end
$var parameter 4 ^ OR $end
$var parameter 4 _ SHIFT_LEFT $end
$var parameter 4 ` SHIFT_RIGHT $end
$var parameter 4 a SHIFT_RIGHT_A $end
$var parameter 4 b SLT $end
$var parameter 4 c SLT_U $end
$var parameter 4 d SUB $end
$var parameter 4 e SUM $end
$var parameter 4 f XOR $end
$var reg 32 g ALU_RD_o [31:0] $end
$upscope $end
$scope module aluctrl $end
$var wire 3 h FUNC3_i [2:0] $end
$var wire 7 i FUNC7_i [6:0] $end
$var wire 1 = is_immediate_i $end
$var wire 2 j ALU_CO_i [1:0] $end
$var parameter 4 k AND $end
$var parameter 4 l EQUAL $end
$var parameter 3 m FUNCT3_BEQ $end
$var parameter 3 n FUNCT3_BNE $end
$var parameter 3 o FUNCT3_GREATER_EQUAL $end
$var parameter 3 p FUNCT3_GREATER_EQUAL_U $end
$var parameter 3 q FUNCT3_SLT $end
$var parameter 3 r FUNCT3_SLT_U $end
$var parameter 4 s GREATER_EQUAL $end
$var parameter 4 t GREATER_EQUAL_U $end
$var parameter 4 u NOR $end
$var parameter 4 v OR $end
$var parameter 4 w SHIFT_LEFT $end
$var parameter 4 x SHIFT_RIGHT $end
$var parameter 4 y SHIFT_RIGHT_A $end
$var parameter 4 z SLT $end
$var parameter 4 { SLT_U $end
$var parameter 4 | SUB $end
$var parameter 4 } SUM $end
$var parameter 4 ~ XOR $end
$var reg 4 !" ALU_OP_o [3:0] $end
$upscope $end
$scope module ctrl $end
$var wire 1 ! clk $end
$var wire 7 "" instruction_opcode [6:0] $end
$var wire 1 $ rst_n $end
$var parameter 4 #" ALUWB $end
$var parameter 4 $" AUIPC $end
$var parameter 7 %" AUIPCI $end
$var parameter 4 &" BRANCH $end
$var parameter 7 '" BRANCHI $end
$var parameter 4 (" DECODE $end
$var parameter 4 )" EXECUTEI $end
$var parameter 4 *" EXECUTER $end
$var parameter 4 +" FETCH $end
$var parameter 7 ," ITYPE $end
$var parameter 4 -" JAL $end
$var parameter 7 ." JALI $end
$var parameter 4 /" JALR $end
$var parameter 7 0" JALRI $end
$var parameter 4 1" JALR_PC $end
$var parameter 4 2" LUI $end
$var parameter 7 3" LUII $end
$var parameter 7 4" LW $end
$var parameter 4 5" MEMADR $end
$var parameter 4 6" MEMREAD $end
$var parameter 4 7" MEMWB $end
$var parameter 4 8" MEMWRITE $end
$var parameter 7 9" RTYPE $end
$var parameter 7 :" SW $end
$var reg 2 ;" alu_src_a [1:0] $end
$var reg 2 <" alu_src_b [1:0] $end
$var reg 2 =" aluop [1:0] $end
$var reg 4 >" estado [3:0] $end
$var reg 1 > ir_write $end
$var reg 1 = is_immediate $end
$var reg 1 < lorD $end
$var reg 1 ; memory_read $end
$var reg 1 : memory_to_reg $end
$var reg 1 9 memory_write $end
$var reg 1 6 pc_source $end
$var reg 1 5 pc_write $end
$var reg 1 4 pc_write_cond $end
$var reg 4 ?" prox_estado [3:0] $end
$var reg 1 2 reg_write $end
$upscope $end
$scope module imm_gen $end
$var wire 32 @" instr_i [31:0] $end
$var parameter 7 A" AUIPC_OPCODE $end
$var parameter 7 B" BRANCH_OPCODE $end
$var parameter 7 C" IMMEDIATE_OPCODE $end
$var parameter 7 D" JALR_OPCODE $end
$var parameter 7 E" JAL_OPCODE $end
$var parameter 7 F" LUI_OPCODE $end
$var parameter 7 G" LW_OPCODE $end
$var parameter 7 H" SW_OPCODE $end
$var reg 32 I" imm_o [31:0] $end
$upscope $end
$scope module regfile $end
$var wire 5 J" RD_ADDR_i [4:0] $end
$var wire 5 K" RS1_ADDR_i [4:0] $end
$var wire 5 L" RS2_ADDR_i [4:0] $end
$var wire 1 ! clk $end
$var wire 32 M" data_i [31:0] $end
$var wire 1 2 wr_en_i $end
$var wire 32 N" RS2_data_o [31:0] $end
$var wire 32 O" RS1_data_o [31:0] $end
$upscope $end
$upscope $end
$scope module mem $end
$var wire 1 P" ack_o $end
$var wire 32 Q" addr_i [31:0] $end
$var wire 1 ! clk $end
$var wire 32 R" data_i [31:0] $end
$var wire 1 & rd_en_i $end
$var wire 1 % wr_en_i $end
$var wire 32 S" data_o [31:0] $end
$var parameter 96 T" MEMORY_FILE $end
$var parameter 32 U" MEMORY_SIZE $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b1000000000000 U"
b11100000111001001101111011001110111001001100001011011010110000100101110011101000111100001110100 T"
b100011 H"
b11 G"
b110111 F"
b1101111 E"
b1100111 D"
b10011 C"
b1100011 B"
b10111 A"
b100011 :"
b110011 9"
b101 8"
b100 7"
b11 6"
b10 5"
b11 4"
b110111 3"
b1101 2"
b1110 1"
b1100111 0"
b1011 /"
b1101111 ."
b1001 -"
b10011 ,"
b0 +"
b110 *"
b1000 )"
b1 ("
b1100011 '"
b1010 &"
b10111 %"
b1100 $"
b111 #"
b1000 ~
b10 }
b1010 |
b1111 {
b1110 z
b111 y
b101 x
b100 w
b1 v
b1001 u
b1101 t
b1100 s
b110 r
b100 q
b111 p
b101 o
b1 n
b0 m
b11 l
b0 k
b1000 f
b10 e
b1010 d
b1111 c
b1110 b
b111 a
b101 `
b100 _
b1 ^
b1001 ]
b1101 \
b1100 [
b11 Z
b0 Y
b0 P
b1000000000000 +
b11100000111001001101111011001110111001001100001011011010110000100101110011101000111100001110100 *
$end
#0
$dumpvars
b100000000000001011101111 S"
bx R"
b0 Q"
1P"
bx O"
bx N"
bx M"
bx L"
bx K"
bx J"
bx I"
bx @"
b1 ?"
b0 >"
b0 ="
b1 <"
b0 ;"
bx ""
b10 !"
b0 j
bx i
bx h
b100 g
b10 X
b100 W
b0 V
bx U
b0 T
bx S
bx R
bx Q
b10 O
0N
b0 M
b100 L
b100 K
0J
0I
b100 H
bx G
bx F
b0 E
b1 D
b0 C
b100000000000001011101111 B
bx A
bx @
bx ?
1>
0=
0<
1;
0:
09
bx 8
b0 7
06
15
04
bx 3
02
bx 1
bx 0
bx /
bx .
b0 -
1,
b0 )
b100000000000001011101111 (
bx '
1&
0%
0$
b0 #
b0 "
0!
$end
#1000
b1 D
b1 <"
1&
1;
1>
15
b0 G
b0 O"
b1101111 8
b1101111 ""
b101 3
b101 J"
b0 A
b0 h
b0 0
b0 K"
b1000 /
b1000 L"
b0 @
b0 i
b1000 ?
b1000 I"
b100 1
b100 M"
b0 U
b100000000000001011101111 R
b100000000000001011101111 @"
b100000000000001011101111 S
b100 Q
1!
#2000
0!
#3000
1!
#4000
0!
#5000
b1000 H
b1000 K
b1000 g
b1000 L
b1000 W
b0 (
b0 B
b0 S"
0,
b100 )
b100 -
b100 Q"
b100 7
b1001 ?"
b10 E
b10 ;"
b10 D
b10 <"
0&
0;
0>
05
b100 T
b1 >"
b1 "
1!
1$
#6000
0!
#7000
b100 K
b100 g
b100 L
b100 W
1,
b111 ?"
16
15
b1 D
b1 <"
b10 E
b10 ;"
b1000 1
b1000 M"
b1001 >"
b1000 Q
b0 S
b10 "
1!
#8000
0!
#9000
xJ
xN
xI
bx K
bx g
bx L
bx W
b1000 M
b1000 V
0,
b1000 )
b1000 -
b1000 Q"
b1000 7
b0 ?"
12
b0 D
b0 <"
b0 E
b0 ;"
06
05
bx H
b100 1
b100 M"
b1000 T
b111 >"
b100 Q
b11 "
1!
#10000
0!
#11000
0J
0N
b1100 H
0I
b1100 K
b1100 g
1,
b100 L
b100 W
b10100000100011 (
b10100000100011 B
b10100000100011 S"
b1 ?"
15
b1 D
b1 <"
1>
1&
1;
02
bx 1
bx M"
b0 >"
bx Q
b100 "
1!
#12000
0!
#13000
b11000 H
b10000 L
b10000 W
b11000 K
b11000 g
b0 (
b0 B
b0 S"
0,
b0 '
b0 .
b0 R"
b0 F
b0 N"
b1000 M
b1000 V
b1100 )
b1100 -
b1100 Q"
b1100 7
b10 ?"
b10 E
b10 ;"
b10 D
b10 <"
0&
0;
0>
05
b100011 8
b100011 ""
b10000 3
b10000 J"
b10 A
b10 h
b0 /
b0 L"
b10000 ?
b10000 I"
b1100 1
b1100 M"
b1000 U
b1100 T
b1 >"
b10100000100011 R
b10100000100011 @"
b10100000100011 S
b1100 Q
b101 "
1!
#14000
0!
#15000
b10000 H
b10000 K
b10000 g
b0 M
b0 V
b101 ?"
b10 D
b10 <"
b1 E
b1 ;"
b11000 1
b11000 M"
b10 >"
b11000 Q
b0 S
b110 "
1!
#16000
0!
#17000
b1100 H
b10000 )
b10000 -
b10000 Q"
b10000 7
b1100 K
b1100 g
b0 L
b0 W
b1100 M
b1100 V
b0 ?"
1<
1%
19
b0 D
b0 <"
b0 E
b0 ;"
b10000 1
b10000 M"
b101 >"
b10000 Q
b111 "
1!
#18000
0!
#19000
b10000 H
b10000 K
b10000 g
1,
b100 L
b100 W
bx (
bx B
bx S"
b1 ?"
15
b1 D
b1 <"
1>
1&
1;
0<
0%
09
b1100 1
b1100 M"
b1100 )
b1100 -
b1100 Q"
b1100 7
b0 >"
b1100 Q
b1000 "
1!
#20000
0!
#21000
0N
b1100 H
b0 L
b0 W
b1100 K
b1100 g
b0 (
b0 B
b0 S"
0,
bx G
bx O"
bx '
bx .
bx R"
bx F
bx N"
b1100 M
b1100 V
b10000 )
b10000 -
b10000 Q"
b10000 7
b10 E
b10 ;"
b10 D
b10 <"
0&
0;
0>
05
bx 8
bx ""
bx 3
bx J"
bx A
bx h
bx 0
bx K"
bx /
bx L"
bx @
bx i
b0 ?
b0 I"
b10000 1
b10000 M"
b1100 U
b10000 T
b1 >"
bx R
bx @"
bx S
b10000 Q
1!
#22000
0!
#23000
b1100 1
b1100 M"
b1100 Q
b0 S
1!
