$date
	Mon Jul 28 22:56:31 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module tb $end
$var reg 1 ! clk $end
$var reg 8 " counter [7:0] $end
$var reg 32 # expected_result [31:0] $end
$var reg 1 $ rst_n $end
$scope module t $end
$var wire 1 ! clk $end
$var wire 1 $ rst_n $end
$var wire 1 % wr_en $end
$var wire 1 & rd_en $end
$var wire 32 ' data_o [31:0] $end
$var wire 32 ( data_i [31:0] $end
$var wire 32 ) addr [31:0] $end
$var parameter 96 * MEMORY_FILE $end
$var parameter 32 + MEMORY_SIZE $end
$scope module core $end
$var wire 32 , PC_next [31:0] $end
$var wire 1 - PC_write_enable $end
$var wire 1 ! clk $end
$var wire 32 . data_o [31:0] $end
$var wire 1 & rd_en_o $end
$var wire 1 $ rst_n $end
$var wire 1 % wr_en_i $end
$var wire 5 / rs2 [4:0] $end
$var wire 5 0 rs1 [4:0] $end
$var wire 1 1 reg_write $end
$var wire 5 2 rd [4:0] $end
$var wire 1 3 pc_write_cond $end
$var wire 1 4 pc_write $end
$var wire 1 5 pc_source $end
$var wire 7 6 opcode [6:0] $end
$var wire 1 7 memory_write $end
$var wire 1 8 memory_to_reg $end
$var wire 1 9 memory_read $end
$var wire 1 : lorD $end
$var wire 1 ; is_immediate $end
$var wire 1 < ir_write $end
$var wire 32 = imm_ext [31:0] $end
$var wire 7 > funct7 [6:0] $end
$var wire 3 ? funct3 [2:0] $end
$var wire 32 @ data_i [31:0] $end
$var wire 2 A aluop [1:0] $end
$var wire 2 B alu_src_b [1:0] $end
$var wire 2 C alu_src_a [1:0] $end
$var wire 32 D addr_o [31:0] $end
$var wire 32 E RS2_data [31:0] $end
$var wire 32 F RS1_data [31:0] $end
$var wire 32 G PC_sel [31:0] $end
$var wire 32 H PC_plus4 [31:0] $end
$var wire 32 I ALU_result [31:0] $end
$var wire 32 J ALU_in2 [31:0] $end
$var wire 32 K ALU_in1 [31:0] $end
$var wire 1 L ALU_Z $end
$var wire 4 M ALU_OP [3:0] $end
$var parameter 32 N BOOT_ADDRESS $end
$var reg 32 O ALUOut [31:0] $end
$var reg 32 P IR [31:0] $end
$var reg 32 Q MDR [31:0] $end
$var reg 32 R PC [31:0] $end
$var reg 32 S reg_write_data [31:0] $end
$var reg 1 T reg_write_enable $end
$scope module alu $end
$var wire 32 U ALU_RS1_i [31:0] $end
$var wire 32 V ALU_RS2_i [31:0] $end
$var wire 1 L ALU_ZR_o $end
$var wire 4 W ALU_OP_i [3:0] $end
$var parameter 4 X AND $end
$var parameter 4 Y EQUAL $end
$var parameter 4 Z GREATER_EQUAL $end
$var parameter 4 [ GREATER_EQUAL_U $end
$var parameter 4 \ NOR $end
$var parameter 4 ] OR $end
$var parameter 4 ^ SHIFT_LEFT $end
$var parameter 4 _ SHIFT_RIGHT $end
$var parameter 4 ` SHIFT_RIGHT_A $end
$var parameter 4 a SLT $end
$var parameter 4 b SLT_U $end
$var parameter 4 c SUB $end
$var parameter 4 d SUM $end
$var parameter 4 e XOR $end
$var reg 32 f ALU_RD_o [31:0] $end
$upscope $end
$scope module aluctrl $end
$var wire 3 g FUNC3_i [2:0] $end
$var wire 7 h FUNC7_i [6:0] $end
$var wire 1 ; is_immediate_i $end
$var wire 2 i ALU_CO_i [1:0] $end
$var parameter 4 j AND $end
$var parameter 4 k EQUAL $end
$var parameter 3 l FUNCT3_BEQ $end
$var parameter 3 m FUNCT3_BNE $end
$var parameter 3 n FUNCT3_GREATER_EQUAL $end
$var parameter 3 o FUNCT3_GREATER_EQUAL_U $end
$var parameter 3 p FUNCT3_SLT $end
$var parameter 3 q FUNCT3_SLT_U $end
$var parameter 4 r GREATER_EQUAL $end
$var parameter 4 s GREATER_EQUAL_U $end
$var parameter 4 t NOR $end
$var parameter 4 u OR $end
$var parameter 4 v SHIFT_LEFT $end
$var parameter 4 w SHIFT_RIGHT $end
$var parameter 4 x SHIFT_RIGHT_A $end
$var parameter 4 y SLT $end
$var parameter 4 z SLT_U $end
$var parameter 4 { SUB $end
$var parameter 4 | SUM $end
$var parameter 4 } XOR $end
$var reg 4 ~ ALU_OP_o [3:0] $end
$upscope $end
$scope module ctrl $end
$var wire 1 ! clk $end
$var wire 7 !" instruction_opcode [6:0] $end
$var wire 1 $ rst_n $end
$var parameter 4 "" ALUWB $end
$var parameter 4 #" AUIPC $end
$var parameter 7 $" AUIPCI $end
$var parameter 4 %" BRANCH $end
$var parameter 7 &" BRANCHI $end
$var parameter 4 '" DECODE $end
$var parameter 4 (" EXECUTEI $end
$var parameter 4 )" EXECUTER $end
$var parameter 4 *" FETCH $end
$var parameter 7 +" ITYPE $end
$var parameter 4 ," JAL $end
$var parameter 7 -" JALI $end
$var parameter 4 ." JALR $end
$var parameter 7 /" JALRI $end
$var parameter 4 0" JALR_PC $end
$var parameter 4 1" LUI $end
$var parameter 7 2" LUII $end
$var parameter 7 3" LW $end
$var parameter 4 4" MEMADR $end
$var parameter 4 5" MEMREAD $end
$var parameter 4 6" MEMWB $end
$var parameter 4 7" MEMWRITE $end
$var parameter 7 8" RTYPE $end
$var parameter 7 9" SW $end
$var reg 2 :" alu_src_a [1:0] $end
$var reg 2 ;" alu_src_b [1:0] $end
$var reg 2 <" aluop [1:0] $end
$var reg 4 =" estado [3:0] $end
$var reg 1 < ir_write $end
$var reg 1 ; is_immediate $end
$var reg 1 : lorD $end
$var reg 1 9 memory_read $end
$var reg 1 8 memory_to_reg $end
$var reg 1 7 memory_write $end
$var reg 1 5 pc_source $end
$var reg 1 4 pc_write $end
$var reg 1 3 pc_write_cond $end
$var reg 4 >" prox_estado [3:0] $end
$var reg 1 1 reg_write $end
$upscope $end
$scope module imm_gen $end
$var wire 32 ?" instr_i [31:0] $end
$var parameter 7 @" AUIPC_OPCODE $end
$var parameter 7 A" BRANCH_OPCODE $end
$var parameter 7 B" IMMEDIATE_OPCODE $end
$var parameter 7 C" JALR_OPCODE $end
$var parameter 7 D" JAL_OPCODE $end
$var parameter 7 E" LUI_OPCODE $end
$var parameter 7 F" LW_OPCODE $end
$var parameter 7 G" SW_OPCODE $end
$var reg 32 H" imm_o [31:0] $end
$upscope $end
$scope module regfile $end
$var wire 5 I" RD_ADDR_i [4:0] $end
$var wire 5 J" RS1_ADDR_i [4:0] $end
$var wire 5 K" RS2_ADDR_i [4:0] $end
$var wire 1 ! clk $end
$var wire 32 L" data_i [31:0] $end
$var wire 1 T wr_en_i $end
$var wire 32 M" RS2_data_o [31:0] $end
$var wire 32 N" RS1_data_o [31:0] $end
$upscope $end
$upscope $end
$scope module mem $end
$var wire 1 O" ack_o $end
$var wire 32 P" addr_i [31:0] $end
$var wire 1 ! clk $end
$var wire 32 Q" data_i [31:0] $end
$var wire 1 & rd_en_i $end
$var wire 1 % wr_en_i $end
$var wire 32 R" data_o [31:0] $end
$var parameter 32 S" DEPTH $end
$var parameter 96 T" MEMORY_FILE $end
$var parameter 32 U" MEMORY_SIZE $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b1000000000000 U"
b11100000111001001101111011001110111001001100001011011010110000100101110011101000111100001110100 T"
b10000000000 S"
b100011 G"
b11 F"
b110111 E"
b1101111 D"
b1100111 C"
b10011 B"
b1100011 A"
b10111 @"
b100011 9"
b110011 8"
b101 7"
b100 6"
b11 5"
b10 4"
b11 3"
b110111 2"
b1101 1"
b1110 0"
b1100111 /"
b1011 ."
b1101111 -"
b1001 ,"
b10011 +"
b0 *"
b110 )"
b1000 ("
b1 '"
b1100011 &"
b1010 %"
b10111 $"
b1100 #"
b111 ""
b1000 }
b10 |
b1010 {
b1111 z
b1110 y
b111 x
b101 w
b100 v
b1 u
b1001 t
b1101 s
b1100 r
b110 q
b100 p
b111 o
b101 n
b1 m
b0 l
b11 k
b0 j
b1000 e
b10 d
b1010 c
b1111 b
b1110 a
b111 `
b101 _
b100 ^
b1 ]
b1001 \
b1101 [
b1100 Z
b11 Y
b0 X
b0 N
b1000000000000 +
b11100000111001001101111011001110111001001100001011011010110000100101110011101000111100001110100 *
$end
#0
$dumpvars
b100000000000001011101111 R"
bx Q"
b0 P"
1O"
bx N"
bx M"
b0 L"
bx K"
bx J"
bx I"
bx H"
bx ?"
b1 >"
b0 ="
b0 <"
b1 ;"
b0 :"
bx !"
b10 ~
b0 i
bx h
bx g
b100 f
b10 W
b100 V
b0 U
0T
b0 S
b0 R
bx Q
bx P
bx O
b10 M
0L
b0 K
b100 J
b100 I
b100 H
b100 G
bx F
bx E
b0 D
b0 C
b1 B
b0 A
b100000000000001011101111 @
bx ?
bx >
bx =
1<
0;
0:
19
08
07
bx 6
05
14
03
bx 2
01
bx 0
bx /
bx .
1-
b100 ,
b0 )
b100000000000001011101111 (
bx '
1&
0%
0$
b0 #
b0 "
0!
$end
#1000
b1 B
b1 ;"
1&
19
1<
14
b0 F
b0 N"
b1101111 6
b1101111 !"
b101 2
b101 I"
b0 ?
b0 g
b0 0
b0 J"
b1000 /
b1000 K"
b0 >
b0 h
b1000 =
b1000 H"
b100000000000001011101111 P
b100000000000001011101111 ?"
b100000000000001011101111 Q
b100 O
1!
#2000
0!
#3000
1!
#4000
0!
#5000
b1000 I
b1000 f
b1000 J
b1000 V
b0 (
b0 @
b0 R"
0-
b1000 ,
b1000 G
b100 )
b100 D
b100 P"
b1001 >"
b10 C
b10 :"
b10 B
b10 ;"
0&
09
0<
04
b100 S
b100 L"
b1000 H
b100 R
b1 ="
b1 "
1!
1$
#6000
0!
#7000
b100 I
b100 f
b100 J
b100 V
1-
b111 >"
15
14
b1 B
b1 ;"
b10 C
b10 :"
b1001 ="
b1000 S
b1000 L"
b1000 O
b10 "
1!
#8000
0!
#9000
xL
bx I
bx f
bx J
bx V
b1000 K
b1000 U
0-
b1000 )
b1000 D
b1000 P"
b0 >"
11
b0 B
b0 ;"
b0 C
b0 :"
05
04
b1100 ,
b1100 G
b100 S
b100 L"
b1100 H
b1000 R
b111 ="
b100 O
b11 "
1!
#10000
0!
#11000
0L
b1100 I
b1100 f
b10100000100011 (
b10100000100011 @
b10100000100011 R"
1-
b100 J
b100 V
b1 >"
14
b1 B
b1 ;"
1<
1&
19
01
b0 ="
1T
bx S
bx L"
b100 "
1!
#12000
0!
#13000
b10000 J
b10000 V
b0 (
b0 @
b0 R"
b10000 I
b10000 f
0-
b0 '
b0 .
b0 Q"
b0 E
b0 M"
b10000 ,
b10000 G
b0 K
b0 U
b1100 )
b1100 D
b1100 P"
b10 >"
b10 C
b10 :"
b10 B
b10 ;"
0&
09
0<
04
b100011 6
b100011 !"
b10000 2
b10000 I"
b10 ?
b10 g
b0 /
b0 K"
b10000 =
b10000 H"
0T
b1100 S
b1100 L"
b10000 H
b1100 R
b1 ="
b10100000100011 P
b10100000100011 ?"
b10100000100011 Q
b1100 O
b101 "
1!
#14000
0!
#15000
b101 >"
b10 B
b10 ;"
b1 C
b1 :"
b10 ="
b10000 S
b10000 L"
b10000 O
b110 "
1!
#16000
0!
#17000
b1100 I
b1100 f
b10000 )
b10000 D
b10000 P"
b0 J
b0 V
b1100 K
b1100 U
b0 >"
1:
1%
17
b0 B
b0 ;"
b0 C
b0 :"
b101 ="
b111 "
1!
#18000
0!
#19000
bx (
bx @
bx R"
b10000 I
b10000 f
1-
b100 J
b100 V
b1100 )
b1100 D
b1100 P"
b1 >"
14
b1 B
b1 ;"
1<
1&
19
0:
0%
07
b0 ="
b1100 S
b1100 L"
b0 Q
b1000 "
1!
#20000
0!
#21000
1L
b0 J
b0 V
b0 (
b0 @
b0 R"
b0 I
b0 f
0-
bx F
bx N"
bx '
bx .
bx Q"
bx E
bx M"
b10100 ,
b10100 G
b0 K
b0 U
b10000 )
b10000 D
b10000 P"
b10 C
b10 :"
b10 B
b10 ;"
0&
09
0<
04
bx 6
bx !"
bx 2
bx I"
bx ?
bx g
bx 0
bx J"
bx /
bx K"
bx >
bx h
b0 =
b0 H"
b10000 S
b10000 L"
b10100 H
b10000 R
b1 ="
bx P
bx ?"
bx Q
1!
#22000
0!
#23000
b0 S
b0 L"
b0 O
1!
